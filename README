High Performance Serialization

A list of 10,000 items can be deserialized, updated and reserialized in less than .2
milliseconds--regardless of the size or complexity of those items.

Fast serialization/deserialization is critical for databases. The key is to
deserialize only what you need and to keep the serialized data for items that have
not been changed for reserialization after an update.

The JID project includes a number of actors which support different types of
persistent data. These actors can in turn be subclassed to add application logic.
Incremental serialization/deserialization is used to achieve high-performance.

Downloads:     https://sourceforge.net/projects/jactor/files/
Blog:          https://sourceforge.net/p/jactor/blog/
API:           http://jactor.sourceforge.net/
VCS:           https://github.com/laforge49/JID/
Issues:        https://github.com/laforge49/JID/issues/
Google groups: http://groups.google.com/group/agilewikidevelopers/

Dependencies
    https://github.com/laforge49/JActor

This project is a reimplementation of a portion of the AsyncFP Scala project:
    https://github.com/laforge49/Asynchronous-Functional-Programming/wiki

