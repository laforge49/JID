Incremental Deserialization for JActor.

Fast serialization/deserialization is critical for databases. The key is to deserialize only
what you need and to keep the serialized data for items that have not been changed for
reserialization after an update.

JID is also likely the first project built using JActor. It is of interest because
 - Most JID components inherit from other JID components. And
 - JID components are organized into trees. All JID components in the same tree share
   the same mailbox and call each other directly to maximize performance.

JID implements a number of components which support different types of persistent data.
Incremental serialization/deserialization techniques are used to achieve high-performance.

Downloads:     https://sourceforge.net/projects/jactor/files/
Blog:          https://sourceforge.net/p/jactor/blog/
API:           http://jactor.sourceforge.net/
VCS:           https://github.com/laforge49/JID/
Issues:        https://github.com/laforge49/JID/issues/
Google groups: http://groups.google.com/group/agilewikidevelopers/

Dependencies
    https://github.com/laforge49/JActor

This project is a reimplementation of a portion of the AsyncFP Scala project:
    https://github.com/laforge49/Asynchronous-Functional-Programming/wiki

