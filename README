High Performance Serialization

Fast deserialization/reserialization is critical for databases. The key is to
deserialize only what you need and to keep the serialized data for items that have
not been changed for reserialization after an update.

JID can deserialize/update/reserialize a map of 10,000 entries in 4 milliseconds,
running on an i5 at 2.53 GHz, where deserialization/reserialization timings are
largely independent of the size and complexity of the table entries. That's 400
nanoseconds per table entry, where the entries are actor key / actor value pairs.

Application are built by subclassing existing JID actors and then composing more
complex structures from them. The JID project includes a number of actors which
support different types of persistent data.

JID Container actors:
 - ListJid,
 - MapJid,
 - TupleJid and
 - ActorJid,
where ListJid and MapJid are homogeneous collections and TupleJid is heterogenous,
where the actor types of the contents are fixed when defining the actor type of the
collection.

ActorJid, in contrast, can hold any type of Actor which subclasses Jid. This is
made possible by including the actor type of the contents when an ActorJid is
serialized.

JID scalar actors:
 - BooleanJid,
 - IntegerJid,
 - LongJid,
 - FloatJid,
 - DoubleJid and
 - StringJid.

(Only IntegerJid, LongJid and StringJid can be used as keys in a MapJid.)

Downloads:     https://sourceforge.net/projects/jactor/files/
Blog:          https://sourceforge.net/p/jactor/blog/
API:           http://jactor.sourceforge.net/
Applications:  https://github.com/laforge49/JID/wiki/Applications
Data Layouts:  https://github.com/laforge49/JID/wiki/Serialized-Data
VCS:           https://github.com/laforge49/JID/
Issues:        https://github.com/laforge49/JID/issues/
Google groups: http://groups.google.com/group/agilewikidevelopers/

Dependencies
 - JActor                  https://github.com/laforge49/JActor

Dependent Projects
 - File Persistence        https://github.com/laforge49/JFile

Available on The Central Repository (Maven): http://search.maven.org/#search|ga|1|org.agilewiki
So you just need to add this to your POM file:
    <dependency>
      <groupId>org.agilewiki.jid</groupId>
      <artifactId>jid</artifactId>
      <version>1.0.1</version>
    </dependency>
(Be sure to update the version number appropriately, of course.)

This project is a reimplementation of a portion of the AsyncFP Scala project:
    https://github.com/laforge49/Asynchronous-Functional-Programming/wiki

